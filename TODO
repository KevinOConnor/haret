New features:

* Port commands from gnu-haret to mainline haret.

* Gpio watching infrastructure.  Monitoring of gpios is a critical
  part of machine discovery.  The current code only supports old PXA
  gpios.

* Document current feature set in wiki.

* Possibly sort help output by command name.

* Possibly link in a "debug.wav" file and provide a mechanism to play
  that file.  This may be useful for tracing the sound system.


Misc cleanups:

* Scan all L1 based 1meg virtual->physical mappings at startup.  This
  will make memPhysMap_section available even in critical sections
  where the code can't call into wince.

  * It might be useful to make memPhysMap_section the default and
    implement a new memPhysMap_temp that can call the wince
    VirtualCopy function when there is no l1 mapping available.  Many
    places in the code assume a reference from memPhysMap has a long
    lifespan, and if the VirtualCopy method is invoked these places
    may fail mysteriously.

  * It may also be useful to implement an optional "window size"
    parameter to memPhysMap - some code assumes it can access large
    areas from a memPhysMap reference, and this may not be true on all
    machines.

* Possibly remove "dump" based commands and re-implement them as
  regular commands.  It isn't clear why "dump mmu" isn't implemented
  as "mmudump".

* Remove old Microsoft based build code.

* Submit nled.h, pkfuncs.h, and pwinuser.h to cegcc.

  * Find out origin of gx.h - sanitize and submit to cegcc if
    necessary.

* Get "bwmem" command working or remove it.

* Get linux penguin logo working or remove it.

* Possibly allow the current machine definition (Mach) to be
  explicitly specified by a user command.


Possible features for "wi":

* Haret should fixup the exception vectors if the user tries to exit
  while in "wi".

* Enhance l1trace so that it can take a list of address ranges along
  with the type of access to report (read and/or write).

* It should be possible to implement a portable instruction breakpoint
  system by overwriting code in memory with an interrupt or "undefined
  instruction" code.  (It may also be possible to just jump to a
  special handler.)  This would allow breakpoints on machines other
  than the PXA.

* Find out why AllocPhysMem is needed - it is unclear why the
  interrupt vector can't jump to an address in normal Haret exe space.

* See if it is possible to monitor memory accesses immediately after a
  resume.  Early attempts at this failed because the MMU wasn't on and
  the fault handlers couldn't run.  The current code re-enables traces
  on the first irq.


Possible features for Linux booting:

* Verify linux booting from resume code.

* Possibly allow PHYSOFFSET_KERNEL (et al.) be set via commands.  It
  may also be necessary to handle the "overwriting memory" case -
  possibly by just allocating additional pages and discarding pages
  that are too low.

* Possibly allow the ability to launch an arbitrary binary (by
  disabling tag generation, specifying a destination address, and a
  jump-to address).  This may be useful for testing new boot loaders.
